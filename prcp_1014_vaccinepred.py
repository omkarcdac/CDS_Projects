# -*- coding: utf-8 -*-
"""PRCP-1014-VaccinePred.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/14qumQTtSwQhPiDQJLoG6KtBmK3jbDLpX
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

data1=pd.read_csv('features.csv')

data2=pd.read_csv('labels.csv')

data=pd.merge(data1,data2,on='respondent_id')

data

data.isnull().sum()

for col in data.columns:
  if data.dtypes[col]=='object':
    data[col].fillna(data[col].mode()[0],inplace=True)
  else:
    data[col].fillna(data[col].mean(),inplace=True)

data.isnull().sum()

from sklearn.preprocessing import LabelEncoder
LE=LabelEncoder()

data['sex']=LE.fit_transform(data['sex'])
data['income_poverty']=LE.fit_transform(data['income_poverty'])
data['marital_status']=LE.fit_transform(data['marital_status'])
data['rent_or_own']=LE.fit_transform(data['rent_or_own'])
data['employment_status']=LE.fit_transform(data['employment_status'])
data['census_msa']=LE.fit_transform(data['census_msa'])
data['education']=LE.fit_transform(data['education'])
data['race']=LE.fit_transform(data['race'])
data['age_group']=LE.fit_transform(data['age_group'])
data['hhs_geo_region']=LE.fit_transform(data['hhs_geo_region'])
data['employment_industry']=LE.fit_transform(data['employment_industry'])
data['employment_occupation']=LE.fit_transform(data['employment_occupation'])

data.head()

numeric_cols = data.select_dtypes(include="number").columns
for i in range(0, len(numeric_cols), 10):
    subset = numeric_cols[i:i+10]
    plt.figure(figsize=(15,6))
    sns.boxplot(data=data[subset])
    plt.xticks(rotation=45)
    plt.title(f"Boxplot for columns {i+1} to {i+len(subset)}")
    plt.show()

for col in data.select_dtypes(include='number').columns:
    mean = data[col].mean()
    std = data[col].std()

    z_scores = (data[col] - mean) / std


    outliers = data[np.abs(z_scores) > 3]

    print(f"Column: {col}")
    print(f"Number of outliers: {outliers.shape[0]}")
    print("-" * 40)

X = data.iloc[:,1:-2]
y = data.iloc[:,-2:]

X

y

from sklearn.model_selection import train_test_split
X_train,X_test,y_train,y_test=train_test_split(X,y,random_state=42)

from sklearn.ensemble import RandomForestClassifier
RF=RandomForestClassifier()
RF.fit(X_train,y_train)

y_pred=RF.predict(X_test)

from sklearn.metrics import accuracy_score,classification_report

accuracy=accuracy_score(y_test,y_pred)

accuracy

